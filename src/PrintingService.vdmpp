class PrintingService
	/*
		Defines the printing service that keeps of the system printers, and operations to decide to what printer the documents get sent to when they have to be printed
	*/
		
	instance variables
		public static servicePrinters: map Printer to char := {|->}; 

	operations
		/*
			Create a printing service providing all printers that take part in the system
		*/
		public PrintingService: set of Printer ==> PrintingService
		PrintingService(printers) ==
		(
			servicePrinters := {|->};
			for all printer in set printers do 
			(
				servicePrinters := servicePrinters munion {printer |-> printer.location}
			);
			return self
		)
			pre
				printers <> {}
			post
				dom servicePrinters = printers;
		
		/*
			Add a document to the queue of a printer in a given location.
			The printer selection algorithm is based on the one with the smallest queue in that location
		*/
		public static addToQueue: Document * char ==> ()
		addToQueue(document, location) ==
		(
			dcl printersFromLocation: set of Printer := getPrintersFromLocation(location);
			
			for all currPrinter in set printersFromLocation do
			(
				if
					forall printer in set printersFromLocation & len currPrinter.printingQueue <= len printer.printingQueue -- get a printer with the smallest printing queue
				then
				(
					currPrinter.addToQueue(document);
					return
				)
			)
		)
			pre
				forall printer in set dom servicePrinters & document not in set elems printer.printingQueue
			post
				(exists1 printer in set dom servicePrinters & document in set elems printer.printingQueue) and 
				(exists1 printer in set dom servicePrinters & document in set elems printer.printingQueue and printer.location = location);
		
		/*
			Add a document to the queue of any printer (not filtered by location)
			The printer selection algorithm is based on the one with the smallest queue
		*/		
		public static addToQueue: Document ==> ()
		addToQueue(document) ==
		(
			dcl allPrinters: set of Printer := dom servicePrinters;
			
			for all currPrinter in set allPrinters do
			(
				if
					forall printer in set allPrinters & len currPrinter.printingQueue <= len printer.printingQueue -- get a printer with the smallest printing queue
				then
				(
					currPrinter.addToQueue(document);
					return
				)
			)
		)
			pre
				forall printer in set dom servicePrinters & document not in set elems printer.printingQueue
			post
				exists1 printer in set dom servicePrinters & document in set elems printer.printingQueue;
		
		/*
			Identify the printer in the same location has the one in the argument and transfer half of the documents in its printing queue to the printer received as argument
		*/		
		public static redistributeDocumentQueue: Printer ==> ()
		redistributeDocumentQueue(printer) ==
		(
			dcl printersFromLocation: set of Printer := getPrintersFromLocation(printer.location);
			for all currPrinter in set printersFromLocation do
			(
				if
					len currPrinter.printingQueue > 1 and currPrinter <> printer and
					(forall printerI in set printersFromLocation & len currPrinter.printingQueue >= len printerI.printingQueue) -- get a printer with the biggest printing queue
				then
				(
					dcl queueSize: nat := len currPrinter.printingQueue;
					dcl realocatedDocuments: seq of Document := currPrinter.printingQueue((queueSize div 2)+1,...,queueSize);
					
					currPrinter.reduceQueueInHalf();
					printer.addToQueue(realocatedDocuments);
					return
				)
			)
		)
			pre
				printer in set dom servicePrinters;
		
		/*
			Get all the printers in a given location
		*/		
		private static getPrintersFromLocation: char ==> set of Printer
		getPrintersFromLocation(location) ==
			return dom (servicePrinters :> {location})
			pre
				location in set rng servicePrinters
			post
				forall printer in set dom servicePrinters & printer.location = location <=> printer in set RESULT;
				
end PrintingService