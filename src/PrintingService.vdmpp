class PrintingService
	
	types
		public static PrinterLocation = map Printer to char;
		
	instance variables
		public servicePrinters: PrinterLocation := {|->}; 

		-- inv ;

	operations
		/*
			Create a printing service providing all printers that take part in the system
		*/
		public PrintingService: set of Printer ==> PrintingService
		PrintingService(printers) ==
		(
			for all printer in set printers do 
			(
				servicePrinters := servicePrinters munion {printer |-> printer.location}
			);
			return self
		)
			pre
				printers <> {}
			post
				dom servicePrinters = printers;

		public addToQueue: Document * char ==> ()
		addToQueue(document, location) ==
		(
			dcl printersFromLocation: set of Printer := getPrintersFromLocation(location);
			
			for all currPrinter in set printersFromLocation do
			(
				if
					forall printer in set printers & len currPrinter.printingQueue <= len printer.printingQueue -- get a printer with the smallest printing queue
				then
				(
					currPrinter.addToQueue(document);
					return
				)
			)
		)
			pre
				forall printer in set dom servicePrinters & document not in set elems printer.printingQueue
			post
				(exists1 printer in set dom servicePrinters & document in set elems printer.printingQueue) and 
				(exists1 printer in set dom servicePrinters & document in set elems printer.printingQueue and printer.location = location);
				
		TODO: ADICIONAR À QUEUE DE UMA IMPRESSORA QUALQUER (NÂO RECEBER LOCATION NOS ARGUMENTOS)
				
		private getPrintersFromLocation: char ==> set of Printer
		getPrintersFromLocation(location) ==
			return dom (servicePrinters :> {location})
			pre
				location in set rng servicePrinters
			post
				forall printer in set dom servicePrinters & printer.location = location <=> printer in set RESULT;
				
end PrintingService