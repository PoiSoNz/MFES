class Printer
	
	instance variables
		public static id_count: nat := 1;
		public id: nat;
		-- TALVEZ MUDAR SE HOUVER TEMPO PARA MAP de ColorType e PaperType |-> nat EM VEZ DE UMA SEQUENCIA
		public inkQuantities: seq1 of nat := [0, 0]; -- [black&white, color]
		public paperQuantities: seq1 of nat := [0, 0, 0]; -- [A3, A4, A5]
		public openReports: seq of Report := []; 
		-- WHEN REPORTS ARE CLOSED (FIXED), REMOVE THEM FROM OPEN REPORTS
		public damaged: bool := false;
		public location: char;
		public printingQueue: seq of Document := [];
		
		inv len inkQuantities = Utils`INK_TYPES_NUM and 
				len paperQuantities = Utils`PAPER_TYPES_NUM;

	operations
		public Printer: seq1 of nat * seq1 of nat * char ==> Printer
		Printer(inkQuantities_, paperQuantities_, location_) ==
		(
			id := id_count;
			id_count := id_count + 1;
			inkQuantities := inkQuantities_;
			paperQuantities := paperQuantities_;
			location := location_;
			return self
		)
			pre
				len inkQuantities_ = Utils`INK_TYPES_NUM and 
				len paperQuantities_ = Utils`PAPER_TYPES_NUM
			post
				id_count = id_count~ + 1 and
				id = id_count~ and
				printingQueue = [] and
				openReports = [] and
				damaged = false;
				
		public addToQueue: Document ==> ()
		addToQueue(document) ==
			printingQueue := printingQueue ^ [document]
			pre
				document not in set elems printingQueue
			post
				document in set elems printingQueue and
				len printingQueue = len printingQueue~ + 1;
		
		public addToQueue: seq of Document ==> ()
		addToQueue(documents) ==
			printingQueue := printingQueue ^ documents
			pre
				elems documents inter elems printingQueue = {}
			post
				elems documents subset elems printingQueue and
				len printingQueue = len printingQueue~ + len documents;
		
		public reduceQueueInHalf: () ==> ()
		reduceQueueInHalf() ==
		(
			dcl queueSize: nat := len printingQueue;
			printingQueue := printingQueue(1,...,queueSize div 2)
		)
			pre
				len printingQueue > 1
			post
				len printingQueue = len printingQueue~ div 2 and
				forall queueIdx in set inds printingQueue & printingQueue(queueIdx) = printingQueue~(queueIdx);
				
		public repairDamage: () ==> ()
		repairDamage() ==
			damaged := false
			pre
				damaged
			post
				not damaged;
				
		public refillInkCartridge: nat1 * nat1 ==> ()
		refillInkCartridge(inkQuantity, inkCartridgeIndex) ==
			inkQuantities(inkCartridgeIndex) := inkQuantities(inkCartridgeIndex) + inkQuantity
			pre
				inkCartridgeIndex >= Utils`BLACK_INK_CARTDG_IDX and
				inkCartridgeIndex <= Utils`COLOR_INK_CARTDG_IDX and
				inkQuantity > 0
			post
				inkQuantities(inkCartridgeIndex) - inkQuantities~(inkCartridgeIndex) = inkQuantity;
				
		public refillPaperSize: nat1 * nat1 ==> ()
		refillPaperSize(paperQuantity, paperSizeIndex) ==
			paperQuantities(paperSizeIndex) := paperQuantities(paperSizeIndex) + paperQuantity
			pre
				paperSizeIndex >= Utils`A3_PAPER_IDX and
				paperSizeIndex <= Utils`A5_PAPER_IDX and
				paperQuantity > 0
			post
				paperQuantities(paperSizeIndex) - paperQuantities~(paperSizeIndex) = paperQuantity;
		
		/*
			Generated a random number to decide if the printer gets damaged (if it gets damaged, a report is created)
			The generated number is returned, so that we can have access to it in the post condition
		*/
		private generateRandomDamage: () ==> nat1
		generateRandomDamage() ==
		(
			dcl randNum: nat1 := MATH`rand(99) + 1;
			
			if 
				randNum <= Utils`DAMAGE_PROBABILITY
			then 
			(
				damaged := true;
				self.createReport(<Damaged>)
			);
			return randNum
		)
			pre
				not damaged
			post
				(RESULT <= Utils`DAMAGE_PROBABILITY and damaged and openReports(len openReports).malfunction = <Damaged>)
				or
				(RESULT > Utils`DAMAGE_PROBABILITY and not damaged);
				
		/*
			Tries to consume the ink and paper resources to print a document, returns true if resources were consumed, and false if they weren't
			If there are not enough resources a report for the missing resources is created and returns false
			A report for a given lack of resources is created, if there isn't already a report for the same problem. Otherwise, we would be creating many reports for the same problem
		*/
		private consumePrintingResources: Document ==> bool
		consumePrintingResources(document) ==
		(
			dcl inkCartridgeIndex: nat1 := getInkCartridgeIndex(document.color);
			dcl paperSizeIndex: nat1 := getPaperSizeIndex(document.size);
			
			if
				inkQuantities(inkCartridgeIndex) >= document.inkQuantity and
				paperQuantities(paperSizeIndex) >= document.paperQuantity
			then -- There's enough resources to print
			(
				inkQuantities(inkCartridgeIndex) := inkQuantities(inkCartridgeIndex) - document.inkQuantity;
				paperQuantities(paperSizeIndex) := paperQuantities(paperSizeIndex) - document.paperQuantity;
				return true
			)
			else
			(
				dcl inkCartridgeReportType: Report`MalfunctionType := getInkCartridgeReportType(document.color);
				dcl paperSizeReportType: Report`MalfunctionType := getPaperSizeReportType(document.size);
				
				if
					inkQuantities(inkCartridgeIndex) < document.inkQuantity
				then -- There's not enough ink resource to print
					createReport(inkCartridgeReportType);
				
				if
					paperQuantities(paperSizeIndex) < document.paperQuantity
				then -- There's not enough paper resource to print
					createReport(paperSizeReportType);
				
				return false
			)
		)
			pre
				document = hd printingQueue
			post
				if RESULT = true
				then
					(exists1 inkCartridgeIdx in set inds inkQuantities & inkQuantities~(inkCartridgeIdx) - inkQuantities(inkCartridgeIdx) = document.inkQuantity) and
					(exists1 paperSizeIdx in set inds paperQuantities & paperQuantities~(paperSizeIdx) - paperQuantities(paperSizeIdx) = document.paperQuantity)
				else -- If no resources were consumed, they must not be altered
					(forall inkCartridgeIdx in set inds inkQuantities & inkQuantities(inkCartridgeIdx) = inkQuantities~(inkCartridgeIdx)) and
					(forall paperSizeIdx in set inds paperQuantities & paperQuantities(paperSizeIdx) = paperQuantities~(paperSizeIdx));
					
		
		/*
			Tries to print the next document in the printing queue, respecting FIFO order. Returns true if it was printed and false otherwise
			If it was not printed due to lack of resources, at least one report should exist trying to increase the resources available for printing the document
			After the document is printed, there's a probability of damaging the printer. If it happens, a report is created for that issue
			If the printing queue gets empty after the printing occurs, it realocates documents from other printers' queue to this one.
			This allows to better distribute the different printers queue size, leading to less waiting time for documents to be printed
		*/		
		public printNext: () ==> bool
		printNext() ==
		(
			dcl canBePrinted: bool;
			
			if
				damaged
			then
			(
				IO`print("Cannot print, printer is damaged");
				return false
			)
			elseif
				len printingQueue = 0
			then
			(
				IO`print("There are no documents to print");
				return false
			);
			
			canBePrinted := self.consumePrintingResources(hd printingQueue);
			if
				canBePrinted
			then
			(
				dcl generatedNumber: nat1 := self.generateRandomDamage();
				
				dcl printingDocument: Document := hd printingQueue;
				printingDocument.printed();

				printingQueue := tl printingQueue;
				
				-- If the printer queue is empty, get documents from other printers' queue. This allow to remove waiting time for other documents
				if
					len printingQueue = 0
				then
					PrintingService`redistributeDocumentQueue(self)
			);
			
			return canBePrinted
		)
			post
				(RESULT = true and 
					(hd printingQueue~).status = <Printed> and
					hd printingQueue~ not in set elems printingQueue and
					len printingQueue = len printingQueue~ - 1 and
					forall idx in set inds printingQueue & printingQueue(idx) = (tl printingQueue~)(idx)) -- Ensures the other elements of the queue are still in the same order
				or
				(RESULT = false and
					len printingQueue = len printingQueue~ and
					forall idx in set inds printingQueue & printingQueue(idx) = printingQueue~(idx)); -- Ensures the queue order was not changed
		
		/*
			Tries to print all the documents existing in the printing queue, respecting FIFO order. Returns true if all were printed, false otherwise
			If somewhere in the queue a document was not printed due to lack of resources, at least one report should exist trying to increase the resources available for printing the document
			After each document is printed, there's a probability of damaging the printer. If it happens, a report is created for that issue and no more printings can be performed
		*/
		public printAll: () ==> bool
		printAll() ==
		(
			dcl continue: bool := true;
			
			while continue do
			(
				continue := self.printNext();
				
				if
					continue = false
				then
				(
					if
						len printingQueue = 0
					then
					(
						IO`print("Printer finished!");
						return true
					)
					else
					(
						IO`print("An error occurred. Check the reports for details!");
						return false
					)
				)
			);
			return true
		)
			pre
				len printingQueue > 0
			post
				(RESULT = true and len printingQueue = 0)
				or
				(RESULT = false and len printingQueue > 0); -- Ensures the queue order was not changed
	
		/*
			Create a report for a given malfunction
			The report is not created if already exists one reporting the same issue. This ensures there's not multiple reports created for the same problem
		*/			
		private createReport: Report`MalfunctionType ==> ()
		createReport(malfunction) ==
		(
			if
				not existsReport(malfunction)
			then
			(
				dcl newReport: Report := new Report(malfunction, self);
				openReports := openReports ^ [newReport]
			)
		)
			post
				(forall idx1 in set inds openReports & not exists idx2 in set inds openReports & openReports(idx1) = openReports(idx2) and idx1 <> idx2) -- guarantee there's not multiple reports about the same malfunction
				and
				(
					(len openReports = len openReports~ + 1 and openReports(len openReports).malfunction = malfunction)
					or
					(len openReports = len openReports~ and exists report in set elems openReports & report.malfunction = malfunction)
				);
				
		/*
			Verifies if there's an openReport regarding a given malfunction. Returns true if it exists, and false otherwise
		*/
		private existsReport: Report`MalfunctionType ==> bool
		existsReport(reportType) ==
			return exists report in set elems openReports & report.malfunction = reportType
			post
				if RESULT = false 
				then forall report in set elems openReports & report.malfunction <> reportType
				else exists report in set elems openReports & report.malfunction = reportType;
				
		/*
			Remove the report regarding a given malfunction
			This function is called by the Report, after its malfunction gets fixed and is closed
		*/
		public removeReport: Report`MalfunctionType ==> ()
		removeReport(malfunction) ==
		(
			for all i in set inds openReports do 
			(
				if
					openReports(i).malfunction = malfunction
				then
				(
					openReports := openReports(1,...,i-1) ^ openReports(i+1,...,len openReports);
					return
				)
			)
		)
			pre
				exists report in set elems openReports & report.malfunction = malfunction
			post
				forall report in set elems openReports & report.malfunction <> malfunction;
		
		
	functions
		private getInkCartridgeIndex: Document`ColorType -> nat1
		getInkCartridgeIndex(color) ==
		(
			cases color:
				<BlackWhite> -> Utils`BLACK_INK_CARTDG_IDX,
				<Color> -> Utils`COLOR_INK_CARTDG_IDX
			end
		);
		
		private getPaperSizeIndex: Document`PaperSize -> nat1
		getPaperSizeIndex(paperSize) ==
		(
			cases paperSize:
				<A3> -> Utils`A3_PAPER_IDX,
				<A4> -> Utils`A4_PAPER_IDX,
				<A5> -> Utils`A5_PAPER_IDX
			end
		);
		
		private getInkCartridgeReportType: Document`ColorType -> Report`MalfunctionType
		getInkCartridgeReportType(color) ==
		(
			cases color:
				<BlackWhite> -> <BlackInkEmpty>,
				<Color> -> <ColorInkEmpty>
			end
		);
		
		private getPaperSizeReportType: Document`PaperSize -> Report`MalfunctionType
		getPaperSizeReportType(paperSize) ==
		(
			cases paperSize:
				<A3> -> <A3Empty>,
				<A4> -> <A4Empty>,
				<A5> -> <A5Empty>
			end
		);
 
end Printer