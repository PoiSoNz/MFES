class Document
	
	types
		public ColorType = <BlackWhite> | <Color>;
		public PaperSize = <A3> | <A4> | <A5>;
		public DocumentStatus = <NotPrinted> | <Queued> | <Printed>; -- A document is considered <NotPrinted> if it hasn't been queued yet
		
	instance variables
		private static id_count: nat := 1;
		private id: nat;
		private color: ColorType;
		private size: PaperSize;
		private inkQuantity: nat1;
		private paperQuantity: nat1;
		private price: real;
		private status: DocumentStatus := <NotPrinted>;
		private owner: [Client] := nil;

		--inv ;

	operations
		public Document: ColorType * PaperSize * nat1 * nat1 * real ==> Document
		Document(color_, size_, inkQuantity_, paperQuantity_, price_) ==
		(
			id := id_count;
			id_count := id_count + 1;
			color := color_;
			size := size_;
			inkQuantity := inkQuantity_;
			paperQuantity := paperQuantity_;
			price := calculatePrice(color_, size_, paperQuantity_);
			status := <NotPrinted>;
			return self
		)
			post
				id_count = id_count~ + 1 and
				id = id_count~ and
				owner = nil and
				price > 0;
				
		public setOwner: Client ==> ()
		setOwner(client) ==
			owner := client
			post
				owner <> nil;
				
	functions
		public static calculatePrice: ColorType * PaperSize * nat1 -> real
		calculatePrice(color, size, paperQuantity) ==
			sheetCost(size) * paperQuantity * colorCostFactor(color);
		
		public static colorCostFactor: ColorType -> real
		colorCostFactor(color) ==
			cases color:
				<BlackWhite> -> 1,
				<Color> -> 1.5
			end;
			
		public static sheetCost: PaperSize -> real
		sheetCost(sheetSize) ==
			cases sheetSize:
				<A3> -> 0.07,
				<A4> -> 0.05,
				<A5> -> 0.03
			end;
 
end Document