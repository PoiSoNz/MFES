class PrintingServiceTest
	/*
		Class responsible for testing the printing service system
	*/
	
	instance variables
		-- Printers
		p1: Printer := new Printer([50, 50], [50, 50, 50], 'a');
		p2: Printer := new Printer([10, 10], [10, 10, 10], 'a');
		p3: Printer := new Printer([3, 10], [3, 10, 50], 'b');
		-- Documents
		smallDocument: Document := new Document(<BlackWhite>, <A5>, 2, 5);
		mediumDocument: Document := new Document(<Color>, <A4>, 5, 10);
		bigDocument: Document := new Document(<BlackWhite>, <A3>, 10, 20);
		-- Clients
		--c1: Client := new Client("Joao");
		--c2: Client := new Client("Miguel", 20);
		
	operations
		private assertTrue: bool ==> ()
		assertTrue(cond) == 
			return
			pre cond;
		
		protected assertEqual: ? * ? ==> ()
		assertEqual(expected, actual) ==
		(
			if expected <> actual then (
	  			IO`print("Actual value (");
	  			IO`print(actual); 
	  			IO`print(") different from expected (");
	  			IO`print(expected);
	  			IO`println(")\n")
			)
		)
			post expected = actual;
		
		-- CLIENT
 		private testClientMoneyDeposit: () ==> ()
 		testClientMoneyDeposit() ==
 		(
 			dcl c1: Client := new Client("Joao");
			dcl c2: Client := new Client("Miguel", 20);
			
 			assertEqual(c1.moneyBalance, 0);
 			c1.moneyDeposit(4);
 			assertEqual(c1.moneyBalance, 4);
 			c1.moneyDeposit(5);
 			assertEqual(c1.moneyBalance, 9);
 			
 			assertEqual(c2.moneyBalance, 20);
 			c2.moneyDeposit(0.5);
 			assertEqual(c2.moneyBalance, 20.5);
 			c2.moneyDeposit(2.33);
 			assertEqual(c2.moneyBalance, 22.83);
 			c2.moneyDeposit(10.15);
 			assertEqual(c2.moneyBalance, 32.98);
		);
		
		private testClientAssignDocuments: () ==> ()
		testClientAssignDocuments() ==
		(
			dcl client: Client := new Client("Joao");
			dcl doc1: Document := new Document(<BlackWhite>, <A3>, 2, 5);
			dcl doc2: Document := new Document(<BlackWhite>, <A3>, 2, 5);
			dcl doc3: Document := new Document(<BlackWhite>, <A3>, 2, 5);
			
			client.assignDocument(doc1);
			assertEqual(doc1.owner, client);
			assertTrue(doc1 in set elems client.documents);
			
			client.assignDocument(doc2);
			assertEqual(doc2.owner, client);
			assertTrue(doc2 in set elems client.documents);
			
			client.assignDocument(doc3);
			assertEqual(doc3.owner, client);
			assertTrue(doc3 in set elems client.documents);
			
			assertTrue({doc1, doc2, doc3} subset elems client.documents);
		);
		
		private testClientRequestPrints: () ==> ()
		testClientRequestPrints() ==
		(
			dcl client: Client := new Client("Joao", 10);
			dcl doc1: Document := new Document(<BlackWhite>, <A3>, 2, 5);
			dcl doc2: Document := new Document(<BlackWhite>, <A3>, 2, 5);
			dcl printer1: Printer := new Printer([50, 50], [50, 50, 50], 'a');
			dcl printer2: Printer := new Printer([50, 50], [50, 50, 50], 'b');
			
			dcl ps: PrintingService := new PrintingService({printer1, printer2});
			
			client.assignDocument(doc1);
			client.assignDocument(doc2);

			assertEqual(doc1.status, <NotPrinted>);
			client.requestPrint(doc1);
			assertEqual(doc1.status, <Queued>);
			
			assertEqual(doc2.status, <NotPrinted>);
			client.requestPrint(doc2, 'b');
			assertEqual(doc2.status, <Queued>);
			
			assertEqual(client.moneyBalance, 10 - doc1.price - doc2.price);
			
			assertTrue({doc1} subset elems printer1.printingQueue);
			assertTrue({doc2} subset elems printer2.printingQueue);
		);
		
		-- PRINTER
		testPrinterAddToQueue: () ==> ()
		testPrinterAddToQueue() ==
		(
			dcl printer: Printer := new Printer([50,50], [50, 50, 50], 'a');
			dcl doc1: Document := new Document(<BlackWhite>, <A3>, 2, 5);
			dcl doc2: Document := new Document(<Color>, <A5>, 3, 10);
			dcl doc3: Document := new Document(<BlackWhite>, <A4>, 2, 5);
			
			
			printer.addToQueue(doc1);
			assertTrue(doc1 in set elems printer.printingQueue);
			
			printer.addToQueue([doc2, doc3]);
			assertTrue({doc1, doc2, doc3} subset elems printer.printingQueue);
		);
		
		testReduceQueueInHalf: () ==> ()
		testReduceQueueInHalf() ==
		(
			dcl printer: Printer := new Printer([50, 50], [50, 50, 50], 'a');
			dcl doc1: Document := new Document(<BlackWhite>, <A3>, 2, 5);
			dcl doc2: Document := new Document(<Color>, <A5>, 3, 10);
			dcl doc3: Document := new Document(<BlackWhite>, <A4>, 2, 5);
			dcl doc4: Document := new Document(<Color>, <A4>, 2, 10);
			
			printer.addToQueue([doc1, doc2, doc3, doc4]);
			assertEqual(len printer.printingQueue, 4);
			printer.reduceQueueInHalf();
			assertEqual(len printer.printingQueue, 2);
		);
		
		testRepairDamage: () ==> ()
		testRepairDamage() ==
		(
			dcl printer: Printer := new Printer([50, 50], [50, 50, 50], 'a');
			
			printer.damaged := true;
			printer.repairDamage();
			assertTrue(not printer.damaged);
		);
		
		testRefillInkCartridge: () ==> ()
		testRefillInkCartridge() ==
		(
			dcl printer: Printer := new Printer([0, 0], [50, 50, 50], 'a');
			
			printer.refillInkCartridge(50, 1);
			printer.refillInkCartridge(25, 2);
			assertEqual(printer.inkQuantities(1), 50);
			assertEqual(printer.inkQuantities(2), 25);
		);
		
		testRefillPaperSize: () ==> ()
		testRefillPaperSize() ==
		(
			dcl printer: Printer := new Printer([50, 50], [0, 0, 0], 'a');
			
			printer.refillPaperSize(50, 1);
			printer.refillPaperSize(20, 2);
			printer.refillPaperSize(30, 3);
			assertEqual(printer.paperQuantities(1), 50);
			assertEqual(printer.paperQuantities(2), 20);
			assertEqual(printer.paperQuantities(3), 30);
		);
		
		testPrintAll: () ==> ()
		testPrintAll() ==
		(
			dcl client: Client := new Client("Joao", 100);
			dcl printer: Printer := new Printer([50, 50], [50, 50, 50], 'a');
			dcl service: PrintingService := new PrintingService({printer});
			dcl doc1: Document := new Document(<BlackWhite>, <A3>, 2, 5);
			dcl doc2: Document := new Document(<Color>, <A4>, 5, 7);
			dcl doc3: Document := new Document(<Color>, <A3>, 2, 10);
			dcl doc4: Document := new Document(<BlackWhite>, <A5>, 6, 5);
			dcl doc5: Document := new Document(<Color>, <A4>, 3, 3);
			dcl success: bool;
			
			client.assignDocument(doc1);
			client.assignDocument(doc2);
			client.assignDocument(doc3);
			client.assignDocument(doc4);
			client.assignDocument(doc5);
			
			client.requestPrint(doc1);
			client.requestPrint(doc2);
			client.requestPrint(doc3);
			client.requestPrint(doc4);
			client.requestPrint(doc5);
			
			assertEqual(doc1.status, <Queued>);
			assertEqual(doc2.status, <Queued>);
			assertEqual(doc3.status, <Queued>);
			assertEqual(doc4.status, <Queued>);
			assertEqual(doc5.status, <Queued>);
			
			success := printer.printAll();
			
			if
				success
			then
			(
				assertEqual(doc1.status, <Printed>);
				assertEqual(doc2.status, <Printed>);
				assertEqual(doc3.status, <Printed>);
				assertEqual(doc4.status, <Printed>);
				assertEqual(doc5.status, <Printed>);
				assertEqual(len printer.printingQueue, 0);
			)
		);
		
		testRemoveReport: () ==> ()
		testRemoveReport() ==
		(
			dcl printer: Printer := new Printer([50, 50], [50, 50, 50], 'a');
			dcl damaged: Report`MalfunctionType := <Damaged>;
			dcl report: Report := new Report(damaged, printer);
			
			printer.openReports := [report];
			
			assertTrue(report in set elems printer.openReports);
			
			printer.removeReport(damaged);
			
			assertTrue(report not in set elems printer.openReports);
		);
		
		testReports: () ==>  ()
		testReports() ==
		(
			dcl printer: Printer := new Printer([0, 0], [0, 0, 0], 'a');
			dcl service: PrintingService := new PrintingService({printer});
			dcl client: Client := new Client("Joao", 50);
			dcl document: Document := new Document(<BlackWhite>, <A3>, 2, 5);
			dcl success: bool;
			
			client.assignDocument(document);
			client.requestPrint(document);
			assertEqual(document.status, <Queued>);
			
			success := printer.printNext();
			
			assertTrue(printer.openReports(1).malfunction = <BlackInkEmpty>);
			assertTrue(printer.openReports(2).malfunction = <A3Empty>);
		);
		
		-- Technician
		testFixPrinterProblem: () ==> ()
		testFixPrinterProblem() ==
		(
			dcl printer: Printer := new Printer([0, 0], [0, 0, 0], 'a');
			dcl damaged: Report`MalfunctionType := <Damaged>;
			dcl blackWhiteInk: Report`MalfunctionType := <BlackInkEmpty>;
			dcl colorInk: Report`MalfunctionType := <ColorInkEmpty>;
			dcl a3empty: Report`MalfunctionType := <A3Empty>;
			dcl a4empty: Report`MalfunctionType := <A4Empty>;
			dcl a5empty: Report`MalfunctionType := <A5Empty>;
			dcl report1: Report := new Report(damaged, printer);
			dcl report2: Report := new Report(blackWhiteInk, printer);
			dcl report3: Report := new Report(colorInk, printer);
			dcl report4: Report := new Report(a3empty, printer);
			dcl report5: Report := new Report(a4empty, printer);
			dcl report6: Report := new Report(a5empty, printer);
			dcl technician: Technician := new Technician("Joao");
			
			printer.damaged := true;
			assertTrue(printer.damaged);
			
			printer.openReports := [report1, report2, report3, report4, report5, report6];
			assertTrue({report1, report2, report3, report4, report5, report6} subset elems printer.openReports);
			
			technician.fixPrinterProblem(report1);
			assertTrue(report1.closed);
			assertTrue(not printer.damaged);
			
			technician.fixPrinterProblem(report2);
			assertTrue(report2.closed);
			assertEqual(printer.inkQuantities(1), Utils`INK_REFILL_QUANTITY);
			
			technician.fixPrinterProblem(report3);
			assertTrue(report3.closed);
			assertEqual(printer.inkQuantities(2), Utils`INK_REFILL_QUANTITY);
			
			technician.fixPrinterProblem(report4);
			assertTrue(report4.closed);
			assertEqual(printer.paperQuantities(1), Utils`PAPER_REFILL_QUANTITY);
			
			technician.fixPrinterProblem(report5);
			assertTrue(report5.closed);
			assertEqual(printer.paperQuantities(2), Utils`PAPER_REFILL_QUANTITY);
			
			technician.fixPrinterProblem(report6);
			assertTrue(report6.closed);
			assertEqual(printer.paperQuantities(3), Utils`PAPER_REFILL_QUANTITY);
			
		);
				
		public static main: () ==> ()
 		main() ==
 		(
 			--dcl test1: PrintingServiceTest := new PrintingServiceTest();
 			--dcl test2: PrintingServiceTest := new PrintingServiceTest();
 			--dcl test3: PrintingServiceTest := new PrintingServiceTest();
 			--dcl test4: PrintingServiceTest := new PrintingServiceTest();
 			--dcl test5: PrintingServiceTest := new PrintingServiceTest();
 			
 			-- Client
 			new PrintingServiceTest().testClientMoneyDeposit();
 			new PrintingServiceTest().testClientAssignDocuments();
 			new PrintingServiceTest().testClientRequestPrints();
 			
 			-- Printer
 			new PrintingServiceTest().testPrinterAddToQueue();
 			new PrintingServiceTest().testReduceQueueInHalf();
 			new PrintingServiceTest().testRepairDamage();
 			new PrintingServiceTest().testRefillInkCartridge();
 			new PrintingServiceTest().testRefillPaperSize();
 			new PrintingServiceTest().testPrintAll();
 			new PrintingServiceTest().testRemoveReport();
 			new PrintingServiceTest().testReports();
 			
 			-- Technician
 			new PrintingServiceTest().testFixPrinterProblem();
		);

end PrintingServiceTest
