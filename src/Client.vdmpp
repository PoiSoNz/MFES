class Client
		
	instance variables
		public static id_count: nat := 1;
		public id: nat;
		public name: Utils`String;
		public moneyBalance: real := 0;
		public documents: seq of Document := [];

		--inv ;

	operations
		/*
			Create a client providing a positive starting money balance
		*/
		public Client: Utils`String * real ==> Client
		Client(name_, startingMoneyBalance) ==
		(
			id := id_count;
			id_count := id_count + 1;
			name := name_;
			moneyBalance := startingMoneyBalance;
			return self
		)
			pre
				startingMoneyBalance > 0
			post
				id_count = id_count~ + 1 and
				id = id_count~ and
				documents = [];
		
		/*
			Create a client with no money balance (zero)
		*/
		public Client: Utils`String ==> Client
		Client(name_) ==
		(
			id := id_count;
			id_count := id_count + 1;
			name := name_;
			moneyBalance := 0;
			return self
		)
			post
				id_count = id_count~ + 1 and
				id = id_count~ and
				moneyBalance = 0 and
				documents = [];
				
		--assignDocument
		-- adiciona documento a documents, e faz setOwner nesse documento
 		public assignDocument: Document ==> ()
		assignDocument(document) ==
		(
			documents := documents ^ [document];
			document.setOwner(self);
		)
			pre
				document not in set elems documents
			post
				document.owner = self and
				document in set elems documents and
				len documents = len documents~ + 1;
				
		public moneyDeposit: real ==> ()
		moneyDeposit(amount) ==
			moneyBalance := moneyBalance + amount
			pre
				amount > 0
			post
				moneyBalance - moneyBalance~ = amount;

		public requestPrint: Document * Printer ==> ()
		requestPrint(document, printer) ==
		(
			printer.addToQueue(document);
			document.queued()
		)
			pre
				document.status = <NotPrinted> and
				document in set elems documents
			post
				document in set elems printer.printingQueue and
				document.status = <Queued>;
		--
		TODO: TIRAR DO MONEY BALANCE O PREÇO DO DOCUMENTO (PRE CONDITION A VERIFICAR SE TEM DINHEIRO SUFICIENTE PARA O PRINT
		
end Client