class Technician
	/*
		Defines a technician capable of resolving the reported malfunctions
	*/
	
	instance variables
		private static id_count: nat := 1;
		private id: nat;
		private name: Utils`String;
		private fixedReports: seq of Report := [];

	operations
		public Technician: Utils`String ==> Technician
		Technician(name_) ==
		(
			id := id_count;
			id_count := id_count + 1;
			name := name_;
			return self
		)
			post
				id_count = id_count~ + 1 and
				id = id_count~ and
				fixedReports = [];
		
		/*
			Fixes a report's malfunction
			If the malfunction is related to lack of resources, it refills the printer with the malfunction
			If the malfunction is damage, it updates the printer's damaged variable to false
		*/
		public fixPrinterProblem: Report ==> ()
		fixPrinterProblem(report) ==
		(
			cases report.malfunction:
				<Damaged> -> self.fixDamage(report.printer),
				<BlackInkEmpty> -> self.fixLackOfInk(report.printer, Utils`BLACK_INK_CARTDG_IDX),
				<ColorInkEmpty> -> self.fixLackOfInk(report.printer, Utils`COLOR_INK_CARTDG_IDX),
				<A3Empty> -> self.fixLackOfPaper(report.printer, Utils`A3_PAPER_IDX),
				<A4Empty> -> self.fixLackOfPaper(report.printer, Utils`A4_PAPER_IDX),
				<A5Empty> -> self.fixLackOfPaper(report.printer, Utils`A5_PAPER_IDX)
			end;
			report.close(self);
			fixedReports := fixedReports ^ [report]
		)
			pre
				not report.closed and
				report not in set elems fixedReports
			post
				report.closed and
				report in set elems fixedReports and
				len fixedReports = len fixedReports~ + 1;
		
		/*
			Updates the printer's damaged variable to false in order to solve the <Damaged> malfunction
		*/
		private fixDamage: Printer ==> ()
		fixDamage(printer) ==
			printer.repairDamage()
			pre
				printer.damaged
			post
				not printer.damaged;
				
		/*
			Refills a printer's type of ink
		*/
		private fixLackOfInk: Printer * nat1 ==> ()
		fixLackOfInk(printer, inkCartridgeIndex) ==
			printer.refillInkCartridge(Utils`INK_REFILL_QUANTITY, inkCartridgeIndex)
			post
				printer.inkQuantities(inkCartridgeIndex) >= Utils`INK_REFILL_QUANTITY;
		
		/*
			Refills a printer's type of paper
		*/	
		private fixLackOfPaper: Printer * nat1 ==> ()
		fixLackOfPaper(printer, paperTypeIndex) ==
			printer.refillPaperSize(Utils`PAPER_REFILL_QUANTITY, paperTypeIndex)
			post
				printer.paperQuantities(paperTypeIndex) >= Utils`PAPER_REFILL_QUANTITY;

end Technician